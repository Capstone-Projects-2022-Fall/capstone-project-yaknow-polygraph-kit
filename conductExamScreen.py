import PySimpleGUI as gui
from PIL import Image, ImageTk
import arduino
import matplotlib

matplotlib.use('TKAgg')
import conductExamScreen
import PolygraphExamSetupScreen
import ResultsDisplayScreen
import respirationBelt
import threading
import time
import tts
import graphResults
from statsmodels.stats.weightstats import ztest as ztest
import numpy as np
import matplotlib.pyplot
from scipy.stats import norm
import statistics
from multiprocessing import Process, Queue

global window
global examFinished
global examTime
global questionCounter
global newQuestion
global respirationRecordings
global bloodPressureRecordings
global pulseRecordings
global skinConductivityRecordings
global yn
global thread
global readyToStart
global inQuestion
global initialExamEnded
global respirationbyQuestion
global questionTimestamps
global zTest1
global zTest2
global zTest3


class singularRecording:
    def __init__(self, timestamp, measurement, question, yn):
        self.timestamp = timestamp
        self.measurement = measurement
        self.question = question
        self.yn = yn


def make_window():
    # layout is a list of lists
    # the lists corresponds to how many rows there will be on the display
    row0 = [
        [gui.Text('yaKnow - Polygraph Exam Running', size=(25, 1))]
    ]
    row1 = [
        [gui.Push(), gui.Text(PolygraphExamSetupScreen.global_list_of_questions_selected[0], key='-Text-')]
    ]
    row2 = [
        [gui.Text('0', key='-Time-'), gui.Text('Cuff Pressure: ', key='-CuffPressure-')]
    ]
    col3_1 = [
        [gui.Button('Test 1 Respiration', key='-Test1R-', visible=False)],
        [gui.Button('Test 2 Respiration', key='-Test2R-', visible=False)],
        [gui.Button('Test 3 Respiration', key='-Test3R-', visible=False)],
        [gui.Button('Test 4 Respiration', key='-Test4R-', visible=False)],
        [gui.Button('Test 5 Respiration', key='-Test5R-', visible=False)],
        [gui.Button('Test 6 Respiration', key='-Test6R-', visible=False)]
    ]
    col3_2 = [
        [gui.Button('Test 1 GSR', key='-Test1G-', visible=False)],
        [gui.Button('Test 2 GSR', key='-Test2G-', visible=False)],
        [gui.Button('Test 3 GSR', key='-Test3G-', visible=False)],
        [gui.Button('Test 4 GSR', key='-Test4G-', visible=False)],
        [gui.Button('Test 5 GSR', key='-Test5G-', visible=False)],
        [gui.Button('Test 6 GSR', key='-Test6G-', visible=False)]
    ]
    row4 = [
        [gui.Button('YES', key='-YES-'), gui.Button('NO', key='-NO-')]
    ]
    row5 = [
        [gui.Push(), gui.Button('Restart', key='-Restart-', visible='False'),
         gui.Button('Cancel Conversion', key='-cancelConversion-'),
         gui.Push()]
    ]
    layout = [
        [gui.Frame(layout=row0, title='', key='row0')],
        [gui.VPush()],
        [gui.Frame(layout=row1, title='', key='row1')],
        [gui.VPush()],
        [gui.Frame(layout=row2, title='', key='row2')],
        [gui.Frame(layout=col3_1, title='', k='col3_1'), gui.Frame(layout=col3_2, title='', k='col3_2')],
        [gui.Push(), gui.Frame(layout=row4, title='', key='row4'), gui.Push()],
        [gui.Push(), gui.Frame(layout=row5, title='', key='row5'), gui.Push()]
    ]
    icon = b''
    window = gui.Window('yaKnow - PolyGraph Exam', layout, size=(1000, 900), icon=icon, finalize=True)
    return window


def examCounter():
    while conductExamScreen.examFinished == False:
        if (conductExamScreen.inQuestion == True):
            conductExamScreen.examTime = conductExamScreen.examTime + 1
            conductExamScreen.window['-Time-'].update(examTime)
            if (conductExamScreen.iterated == False):
                conductExamScreen.questionTimestamps.append(examTime)
                conductExamScreen.iterated = True
                # for respirationRecording in conductExamScreen.respirationRecordings:
                #    if respirationRecording.yn == None:
                #        respirationRecording.yn = conductExamScreen.yn
                conductExamScreen.yn = None
                conductExamScreen.newQuestion = PolygraphExamSetupScreen.global_overall_questions[
                    conductExamScreen.questionCounter]
                tts.questionToSpeech(newQuestion, conductExamScreen.questionCounter)
                conductExamScreen.questionCounter = conductExamScreen.questionCounter + 1
                conductExamScreen.window['-Text-'].update(newQuestion)
                if (len(PolygraphExamSetupScreen.global_overall_questions) == (questionCounter)):
                    while (len(bloodPressureRecordings) != len(PolygraphExamSetupScreen.global_overall_questions)):
                        # print("BP SIZE: ", len(bloodPressureRecordings) )
                        # print("Question Size: ", len(PolygraphExamSetupScreen.global_overall_questions))
                        conductExamScreen.examTime = conductExamScreen.examTime + 1
                        conductExamScreen.window['-Time-'].update(examTime)
                        conductExamScreen.window["-CuffPressure-"].update(bloodPressureRecordings)
                        time.sleep(1)
                        continue
                    window.write_event_value('-ENDED-', None)
                # else:
                #    conductExamScreen.questionCounter = conductExamScreen.questionCounter + 1
                #    conductExamScreen.window['-Text-'].update(newQuestion)
            time.sleep(1)
        else:
            print("Pausing")
            conductExamScreen.iterated = False
            time.sleep(1)


def examOver():
    print("Entered examOver")
    conductExamScreen.respirationbyQuestion = []
    tempArray = []
    tempQuestion = conductExamScreen.respirationRecordings[0].question
    x = 0
    while (x < len(respirationRecordings)):
        if ((tempQuestion != respirationRecordings[x].question) or (x == (len(respirationRecordings) - 1))):
            conductExamScreen.respirationbyQuestion.append(tempArray)
            # print(respirationbyQuestion[0][0], respirationbyQuestion[0][1])
            tempArray = []
            tempArray.append(respirationRecordings[x].measurement[0])
            tempQuestion = respirationRecordings[x].question
            x = x + 1
        else:
            tempArray.append(respirationRecordings[x].measurement[0])
            x = x + 1


def conductZtest(question):
    '''
    This function will return the z and p values from comparing a problematic question to a baseline
    needs baselineData array/list and ProblematicQuestionData as input
    :return list of (z value, p value), also prints out a statement if we have reasonable evidence to show that someone is lying
    '''
    baselineData1 = respirationbyQuestion[0]
    baselineData2 = respirationbyQuestion[1]
    baselineData3 = respirationbyQuestion[2]
    questionData = respirationbyQuestion[question]
    conductExamScreen.zTest1 = list(ztest(baselineData1, questionData))
    # if zTest1[1] < .05:
    #     print("we reject the null hypothesis, we have reason to believe this data is fairly different... could be lying")
    # else:
    #     print("We do not have reason to believe the data has any major differences")
    conductExamScreen.zTest2 = list(ztest(baselineData2, questionData))
    # if zTest2[1] < .05:
    #     print("we reject the null hypothesis, we have reason to believe this data is fairly different... could be lying")
    # else:
    #     print("We do not have reason to believe the data has any major differences")
    conductExamScreen.zTest3 = list(ztest(baselineData3, questionData))
    # if zTest3[1] < .05:
    #     print("we reject the null hypothesis, we have reason to believe this data is fairly different... could be lying")
    # else:
    #     print("We do not have reason to believe the data has any major differences")


#   return conductExamScreen.zTest1,conductExamScreen.zTest2,zTest3
def showRespirationProbabilityDistribution(question):
    # mean1 = statistics.mean(cityA)
    # sd1 = statistics.stdev(cityA)
    #
    # mean2 = statistics.mean(cityB)
    # sd2 = statistics.stdev(cityB)
    #
    # # plt.plot(cityA, norm.pdf(cityA, mean1, sd1), 'r')
    # #
    #
    #
    #
    # graph0.plot(cityB, norm.pdf(cityB, mean2, sd2), 'g', marker='*')
    # plt.show()
    for measurement in respirationbyQuestion[question]:
        print(measurement)
    conductExamScreen.respirationbyQuestion[question].sort()
    conductExamScreen.respirationbyQuestion[1].sort()
    conductExamScreen.respirationbyQuestion[2].sort()
    conductExamScreen.respirationbyQuestion[3].sort()

    # # subplot x and y axis
    # ax = fig.add_subplot(111)
    # ax.spines['top'].set_color('none')
    # ax.spines['bottom'].set_color('none')
    # ax.spines['left'].set_color('none')
    # ax.spines['right'].set_color('none')
    # ax.tick_params(labelcolor='w', top=False, bottom=False, left=False, right=False)
    # ax.set_xlabel('respiration')
    # ax.set_ylabel('probability')

    #   fig, (graph0, graph1, graph2, ax) = matplotlib.pyplot.subplots(nrows=4, ncols=1, sharex=False)
    fig, (graph0, graph1, graph2) = matplotlib.pyplot.subplots(nrows=3, ncols=1, sharex=False)

    # baseline1question
    meanBaseline1 = statistics.mean(conductExamScreen.respirationbyQuestion[0])

    standardDeviationBaseline1 = statistics.stdev(conductExamScreen.respirationbyQuestion[0])
    #   graph0.plot(conductExamScreen.respirationbyQuestion[0], norm.pdf(respirationbyQuestion[0], meanBaseline1, standardDeviationBaseline1), 'r',marker='o')
    # baseline2question
    meanBaseline2 = statistics.mean(conductExamScreen.respirationbyQuestion[1])
    standardDeviationBaseline2 = statistics.stdev(conductExamScreen.respirationbyQuestion[1])
    #  graph1.plot(conductExamScreen.respirationbyQuestion[1], norm.pdf(respirationbyQuestion[1], meanBaseline2, standardDeviationBaseline2), 'r', marker='o')
    # baseline3question
    meanBaseline3 = statistics.mean(conductExamScreen.respirationbyQuestion[2])
    standardDeviationBaseline3 = statistics.stdev(conductExamScreen.respirationbyQuestion[2])
    #   graph2.plot(conductExamScreen.respirationbyQuestion[2], norm.pdf(respirationbyQuestion[2], meanBaseline3, standardDeviationBaseline3), 'r', marker='o')
    # Test
    meanTest = statistics.mean(conductExamScreen.respirationbyQuestion[question])
    standardDeviationTest = statistics.stdev(conductExamScreen.respirationbyQuestion[question])
    # plotting
    graph0.plot(conductExamScreen.respirationbyQuestion[question],
                norm.pdf(respirationbyQuestion[question], meanTest, standardDeviationTest), 'g', marker='*')
    graph0.plot(conductExamScreen.respirationbyQuestion[0],
                norm.pdf(respirationbyQuestion[0], meanBaseline1, standardDeviationBaseline1), 'r', marker='o')
    graph1.plot(conductExamScreen.respirationbyQuestion[question],
                norm.pdf(respirationbyQuestion[question], meanTest, standardDeviationTest), 'g', marker='*')
    graph1.plot(conductExamScreen.respirationbyQuestion[1],
                norm.pdf(respirationbyQuestion[1], meanBaseline2, standardDeviationBaseline2), 'r', marker='o')
    graph2.plot(conductExamScreen.respirationbyQuestion[question],
                norm.pdf(respirationbyQuestion[question], meanTest, standardDeviationTest), 'g', marker='*')
    graph2.plot(conductExamScreen.respirationbyQuestion[2],
                norm.pdf(respirationbyQuestion[2], meanBaseline3, standardDeviationBaseline3), 'r', marker='o')
    # Subplot Titles
    #     graph0[0, 0].title.set_text("Normal Distribution 1")
    #     graph0[0, 1].title.set_text("Normal Distribution 2")
    #     graph0[0, 2].title.set_text("Normal Distribution 3")
    conductZtest(question)
    graph0.text(0.5, 0.25, 'Ztest: results(%s)' % conductExamScreen.zTest1, horizontalalignment='center',
                verticalalignment='center',
                transform=graph0.transAxes)
    graph1.text(0.5, 0.25, 'Ztest: results(%s)' % conductExamScreen.zTest2, horizontalalignment='center',
                verticalalignment='center',
                transform=graph1.transAxes)
    graph2.text(0.5, 0.25, 'Ztest: results(%s)' % conductExamScreen.zTest3, horizontalalignment='center',
                verticalalignment='center',
                transform=graph2.transAxes)
    matplotlib.pyplot.show()


def startExam(window1):
    conductExamScreen.justRespirationRate = []
    conductExamScreen.questionTimestamps = []
    conductExamScreen.respirationbyQuestion = []
    conductExamScreen.window = window1
    conductExamScreen.initialExamEnded = False
    thread = threading.Thread(target=conductExamScreen.examCounter)
    thread.start()
    while True:
        event, values = PolygraphExamSetupScreen.window.read()
        # if user clicks Start Examination button go to next page
        if event in (gui.WIN_CLOSED, 'EXIT'):
            break
        elif event == '-YES-':
            conductExamScreen.yn = True
        elif event == '-NO-':
            conductExamScreen.yn = False
        elif event == '-ENDED-':
            examOver()
            print("Respiration by Question: ", len(conductExamScreen.respirationbyQuestion))
            conductExamScreen.examFinished = True
            conductExamScreen.window['-Test1R-'].update(visible=True)
            conductExamScreen.window['-Test2R-'].update(visible=True)
            conductExamScreen.window['-Test3R-'].update(visible=True)
            conductExamScreen.window['-Test4R-'].update(visible=True)
            conductExamScreen.window['-Test5R-'].update(visible=True)
            conductExamScreen.window['-Test6R-'].update(visible=True)
            conductExamScreen.window['-Test1G-'].update(visible=True)
            conductExamScreen.window['-Test2G-'].update(visible=True)
            conductExamScreen.window['-Test3G-'].update(visible=True)
            conductExamScreen.window['-Test4G-'].update(visible=True)
            conductExamScreen.window['-Test5G-'].update(visible=True)
            conductExamScreen.window['-Test6G-'].update(visible=True)
        elif event == '-Test1R-':
            showRespirationProbabilityDistribution(3)
        elif event == '-Test2R-':
            showRespirationProbabilityDistribution(4)
        elif event == '-Test3R-':
            showRespirationProbabilityDistribution(5)
        elif event == '-Test4R-':
            showRespirationProbabilityDistribution(6)
        elif event == '-Test5R-':
            showRespirationProbabilityDistribution(7)
        elif event == '-Test6R-':
            showRespirationProbabilityDistribution(8)
        # graphResults.createGraphs()
        # plt.annotate('question 1', xy=(85, .03), arrowprops=dict(arrowstyle='-', connectionstyle='arc3,rad=0'),
        #              xytext=(85, .01))
        # plt.annotate('question 2', xy=(105.03, .02986), arrowprops=dict(arrowstyle='-', connectionstyle='arc3,rad=0'),
        #              xytext=(105.03, .01))
        # graphResults.slider_position.on_changed(graphResults.update)
        # graphResults.plt.show(block=False)
# examOver()